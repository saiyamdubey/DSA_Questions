Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 

Follow up: Recursive solution is trivial, could you do it iteratively?

// iterative code

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        if(!root) return {};
        stack<TreeNode*> st;
        vector<int> ans;
        TreeNode* current = root;

        while(current || !st.empty())
        {
            if(!current) 
            {
                ans.push_back(st.top()->val);
                current = st.top()->right;
                st.pop();
            }
            else 
            {
                st.push(current);
                current = current->left;
            }
        }

        return ans;
    }
};


// recurssive code 

class Solution {
    vector<int> ans;
public:
    void helper(TreeNode* root)
    {
        if(!root) return;
        helper(root->left);
        ans.push_back(root->val);
        helper(root->right);
    }

    vector<int> inorderTraversal(TreeNode* root) {
        helper(root);
        return ans;
    }
};